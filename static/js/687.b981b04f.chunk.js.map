{"version":3,"file":"static/js/687.b981b04f.chunk.js","mappings":"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","sources":["webpack://demos/./src/PageGradientScroll/index.module.css?7b7e","PageGradientScroll/data.ts","PageGradientScroll/index.tsx","PageGradientScroll/utils/imageToDataUri.ts","PageGradientScroll/utils/getAverageColorOfImage.ts","PageGradientScroll/utils/isDarkColor.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"navbar\":\"PageGradientScroll_navbar__qjoy+\",\"wrap\":\"PageGradientScroll_wrap__OyIwd\",\"bgImage\":\"PageGradientScroll_bgImage__bTqO5\",\"bgImageMask\":\"PageGradientScroll_bgImageMask__COTpi\",\"tab\":\"PageGradientScroll_tab__4X4i8\",\"tabItem\":\"PageGradientScroll_tabItem__YRTNd\",\"tabActive\":\"PageGradientScroll_tabActive__EiApL\",\"content\":\"PageGradientScroll_content__xhd+W\",\"contentItem\":\"PageGradientScroll_contentItem__N0x8b\"};","export const images = [\n  {\n    name: 'clouds',\n    url: 'https://cdn.jsdelivr.net/gh/Gaohaoyang/pics/demos/clouds.png',\n  },\n  {\n    name: 'stars',\n    url: 'https://cdn.jsdelivr.net/gh/Gaohaoyang/pics/demos/stars.png',\n  },\n]\n\nexport const tabsName = [\n  'Lorem',\n  'Ipsum',\n  'Consectetur',\n  'Vitae',\n  'Maecenas',\n  'Sit',\n  'Donec',\n  'Sed',\n]\n","import React, { useState, useRef, useEffect } from 'react'\nimport styles from './index.module.css'\nimport { images, tabsName } from './data'\nimport { imageToDataUri, getAverageColor, isDarkColor } from './utils'\n\nconst imageHeightPx = (window.innerWidth / 16) * 9\nconst randomImageIndex = Math.floor(Math.random() * images.length)\nconst navBarHeightPx = 60\n\nfunction PageGradientScroll() {\n  const [currentTab, setCurrentTab] = useState(0)\n  const [isDarkBgColor, setIsDarkBgColor] = useState(false)\n  const [averageColor, setAverageColor] = useState<[number, number, number]>([255, 255, 255])\n  const tabRef = useRef<HTMLDivElement>(null)\n  const bgImageMaskRef = useRef<HTMLDivElement>(null)\n  const navbarRef = useRef<HTMLDivElement>(null)\n\n  console.log(isDarkBgColor)\n\n  const listenWindowScroll = () => {\n    window.addEventListener('scroll', () => {\n      if (!bgImageMaskRef.current) {\n        return\n      }\n      if (!navbarRef.current) {\n        return\n      }\n      const threshold = imageHeightPx - navBarHeightPx\n      const scrollTop = document.documentElement.scrollTop || document.body.scrollTop\n      if (scrollTop >= threshold) {\n        bgImageMaskRef.current.style.opacity = '1'\n        bgImageMaskRef.current.style.height = `${navBarHeightPx + 20}px`\n        navbarRef.current.style.opacity = '1'\n      } else {\n        bgImageMaskRef.current.style.opacity = `${scrollTop / threshold}`\n        bgImageMaskRef.current.style.height = `${imageHeightPx - scrollTop}px`\n        navbarRef.current.style.opacity = `${scrollTop / threshold}`\n      }\n    })\n  }\n\n  const getAverageColorAndDetectDark = () => {\n    imageToDataUri(images[randomImageIndex].url).then((dataUri) => {\n      const imgElement = document.createElement('img')\n      imgElement.src = dataUri\n      imgElement.onload = () => {\n        const average = getAverageColor(imgElement)\n        setAverageColor(average)\n        if (isDarkColor(average)) {\n          setIsDarkBgColor(true)\n        }\n      }\n    })\n  }\n\n  /**\n   * This code handles the click event for the tab buttons.\n   * It also scrolls the tab buttons to the center of the screen.\n   */\n  const handleClickTab = (index: number) => {\n    setCurrentTab(index)\n    if (tabRef.current) {\n      const halfScreenWidth = window.innerWidth / 2\n      const currentTabHalfWidth = (tabRef.current.children[index] as HTMLElement).offsetWidth / 2\n\n      const left = (tabRef.current.children[index] as HTMLElement).offsetLeft\n        - halfScreenWidth\n        + currentTabHalfWidth\n\n      tabRef.current.scroll({\n        left,\n        behavior: 'smooth',\n      })\n    }\n  }\n\n  useEffect(() => {\n    getAverageColorAndDetectDark()\n    listenWindowScroll()\n  }, [])\n\n  return (\n    <div\n      style={{\n        backgroundColor: `rgb(${averageColor[0]}, ${averageColor[1]}, ${averageColor[2]})`,\n      }}\n    >\n      <div\n        className={styles.navbar}\n        style={{\n          height: navBarHeightPx,\n          color: isDarkBgColor ? '#fff' : '#333',\n        }}\n        ref={navbarRef}\n      >\n        Page Gradient Scroll\n      </div>\n      <img\n        className={styles.bgImage}\n        src={images[randomImageIndex].url}\n        alt={images[randomImageIndex].name}\n      />\n      <div\n        className={styles.bgImageMask}\n        ref={bgImageMaskRef}\n        style={{\n          height: imageHeightPx,\n          backgroundColor: `rgb(${averageColor[0]}, ${averageColor[1]}, ${averageColor[2]})`,\n        }}\n      />\n      <div className={styles.wrap}>\n        <div\n          className={styles.bgPadding}\n          style={{\n            height: imageHeightPx - 20,\n          }}\n        />\n        <div\n          className={styles.tab}\n          ref={tabRef}\n          style={{\n            top: navBarHeightPx,\n          }}\n        >\n          {tabsName.map((item, index) => (\n            <button\n              key={item}\n              className={`${styles.tabItem} ${currentTab === index ? styles.tabActive : ''}`}\n              onClick={() => {\n                handleClickTab(index)\n              }}\n              type=\"button\"\n            >\n              {item}\n            </button>\n          ))}\n        </div>\n        <div className={styles.content}>\n          {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((item) => (\n            <div className={styles.contentItem} key={item}>\n              {item}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default PageGradientScroll\n","/* eslint-disable max-len */\n/**\n * convert the image to a data URI\n */\nexport const imageToDataUri: (url: string) => Promise<string> = (url) => new Promise((resolve, reject) => {\n  const xhr = new XMLHttpRequest()\n  xhr.onload = () => {\n    const reader = new FileReader()\n    reader.onloadend = () => {\n      resolve(reader.result as string)\n    }\n    reader.readAsDataURL(xhr.response)\n  }\n  xhr.onerror = (e) => {\n    console.error('An error occurred while transferring the image.', e)\n    reject(e)\n  }\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.send()\n})\n","/* eslint-disable max-len */\n/**\n * get average color of an image\n */\nexport const getAverageColor: (img: HTMLImageElement) => [number, number, number] = (img) => {\n  const canvas = document.createElement('canvas')\n  canvas.width = img.width\n  canvas.height = img.height\n  const context = canvas.getContext('2d')\n\n  if (!context) return [255, 255, 255]\n\n  context.drawImage(img, 0, 0)\n  const imageData = context.getImageData(0, 0, canvas.width, canvas.height)\n  const { data } = imageData\n  let r = 0\n  let g = 0\n  let b = 0\n  let count = 0\n  // 每隔多个像素取一个点，减少计算量，提升性能\n  for (let y = 0; y < canvas.height; y += 50) {\n    for (let x = 0; x < canvas.width; x += 50) {\n      const index = (y * canvas.width + x) * 4\n      r += data[index]\n      g += data[index + 1]\n      b += data[index + 2]\n      count += 1\n    }\n  }\n  return [Math.floor(r / count), Math.floor(g / count), Math.floor(b / count)]\n}\n","/**\n * check if a color is dark\n */\nexport const isDarkColor = (rgb: [number, number, number]) => {\n  if (!rgb) {\n    throw new Error('rgb is required')\n  }\n  const [red, green, blue] = rgb\n  if (red < 0 || green < 0 || blue < 0) {\n    throw new Error('rgb values must be greater than or equal to zero')\n  }\n  if (red > 255 || green > 255 || blue > 255) {\n    throw new Error('rgb values must be less than or equal to 255')\n  }\n  return red * 0.299 + green * 0.587 + blue * 0.114 < 180\n}\n"],"names":["images","name","url","tabsName","imageHeightPx","window","innerWidth","randomImageIndex","Math","floor","random","_useState","useState","_useState2","_slicedToArray","currentTab","setCurrentTab","_useState3","_useState4","isDarkBgColor","setIsDarkBgColor","_useState5","_useState6","averageColor","setAverageColor","tabRef","useRef","bgImageMaskRef","navbarRef","console","log","getAverageColorAndDetectDark","Promise","resolve","reject","xhr","XMLHttpRequest","onload","reader","FileReader","onloadend","result","readAsDataURL","response","onerror","e","error","open","responseType","send","then","dataUri","imgElement","document","createElement","src","average","img","canvas","width","height","context","getContext","drawImage","data","getImageData","r","g","b","count","y","x","index","getAverageColor","rgb","Error","_rgb","red","green","blue","isDarkColor","useEffect","addEventListener","current","threshold","scrollTop","documentElement","body","style","opacity","concat","navBarHeightPx","_jsxs","backgroundColor","children","_jsx","className","styles","color","ref","alt","top","map","item","onClick","halfScreenWidth","currentTabHalfWidth","offsetWidth","left","offsetLeft","scroll","behavior","handleClickTab","type"],"sourceRoot":""}